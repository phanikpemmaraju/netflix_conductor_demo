# --- Global Role Mappings (External/IdP value to Internal Conceptual Name) ---
# These define the EXACT string values expected from your JWT claims for each conceptual role.
# These keys (e.g., 'admin', 'user') map to the enum names (ADMIN, USER) used in your Java code.
# The values (e.g., 'microtx_admin_role') are the literal strings found in your JWT.

# User Roles
conductor.security.role.admin=microtx_admin_role
conductor.security.role.user=microtx_user_role
conductor.security.role.read_only_user=microtx_readonly_user_role
conductor.security.role.workflow_manager=microtx_workflow_manager_role
conductor.security.role.metadata_manager=microtx_metadata_manager_role

# Application Roles (Machine-to-Machine)
conductor.security.role.unrestricted_worker=microtx_unrestricted_worker_role
conductor.security.role.worker=microtx_worker_role
conductor.security.role.metadata_api=microtx_metadata_api_role
conductor.security.role.application_api=microtx_application_api_role


# --- JWT Claims Role Paths ---
# Specifies the JSON paths within the JWT claims where raw roles can be found.
# Example: "realm_access.roles" (Keycloak realm roles), "resource_access.your-app-client.roles"
conductor.security.jwt.claims.role-paths=realm_access.roles,resource_access.your-app-client.roles


# --- Dynamic Spring Security URL Rules Configuration ---
# Rules use property placeholders to reference the global role mappings defined above.
# The 'roles' value will be the *external* role name (e.g., microtx_admin_role),
# which will be checked by requestMatchers. The JwtTokenConverterConfig maps
# these external names to internal enum names for @PreAuthorize.

# Rule 0: Admin Resource - Full access to /admin/**
conductor.security.rules[0].path=/admin/**
conductor.security.rules[0].roles=${conductor.security.role.admin}

# Rule 1: Queue Resource - Access for ADMIN
conductor.security.rules[1].path=/queue/**
conductor.security.rules[1].roles=${conductor.security.role.admin}

# Rule 2: Workflow Bulk Resource - Access for WORKFLOW_MANAGER, ADMIN (User Roles)
conductor.security.rules[2].path=/workflow_bulk/**
conductor.security.rules[2].roles=${conductor.security.role.workflow_manager},${conductor.security.role.admin}

# Rule 3: Workflow Resource (GET) - Access for READ_ONLY_USER, WORKFLOW_MANAGER, ADMIN (User Roles)
# AND: Unrestricted Worker (Application Role) - can poll/view any workflow
conductor.security.rules[3].path=/workflows/**
conductor.security.rules[3].methods=GET
conductor.security.rules[3].roles=${conductor.security.role.read_only_user},${conductor.security.role.workflow_manager},${conductor.security.role.admin},${conductor.security.role.unrestricted_worker}

# Rule 4: Workflow Resource (POST/PUT/DELETE) - Access for WORKFLOW_MANAGER, ADMIN (User Roles)
# AND: Unrestricted Worker (Application Role) - can execute any workflow
conductor.security.rules[4].path=/workflows/**
conductor.security.rules[4].methods=POST,PUT,DELETE
conductor.security.rules[4].roles=${conductor.security.role.workflow_manager},${conductor.security.role.admin},${conductor.security.role.unrestricted_worker}

# Rule 5: Metadata Resource (GET) - Access for READ_ONLY_USER, METADATA_MANAGER, ADMIN (User Roles)
# AND: Metadata API (Application Role) - for retrieving/managing metadata
conductor.security.rules[5].path=/metadata/**
conductor.security.rules[5].methods=GET
conductor.security.rules[5].roles=${conductor.security.role.read_only_user},${conductor.security.role.metadata_manager},${conductor.security.role.admin},${conductor.security.role.metadata_api}

# Rule 6: Metadata Resource (POST/PUT/DELETE) - Access for METADATA_MANAGER, ADMIN (User Roles)
# AND: Metadata API (Application Role) - for creating/managing metadata
conductor.security.rules[6].path=/metadata/**
conductor.security.rules[6].methods=POST,PUT,DELETE
conductor.security.rules[6].roles=${conductor.security.role.metadata_manager},${conductor.security.role.admin},${conductor.security.role.metadata_api}

# Rule 7: Event Resources (GET, POST, PUT) - Access for USER, ADMIN (User Roles)
conductor.security.rules[7].path=/event/**
conductor.security.rules[7].methods=GET,POST,PUT
conductor.security.rules[7].roles=${conductor.security.role.user},${conductor.security.role.admin}

# Rule 8: Secrets - Access for WORKFLOW_MANAGER, METADATA_MANAGER, ADMIN (EXCLUDES READ_ONLY_USER)
conductor.security.rules[8].path=/secrets/**
conductor.security.rules[8].roles=${conductor.security.role.workflow_manager},${conductor.security.role.metadata_manager},${conductor.security.role.admin}

# Rule 9: User-specific resources (/my-resources/**) - Requires authentication for granular checks (handled by PermissionEvaluator)
conductor.security.rules[9].path=/my-resources/**
conductor.security.rules[9].permitAll=false

# Rule 10: General API for managing applications - Access for APPLICATION_API, ADMIN (Application Role)
conductor.security.rules[10].path=/applications/**
conductor.security.rules[10].roles=${conductor.security.role.application_api},${conductor.security.role.admin}

# Rule 11: General tasks endpoint for Worker (Application Role)
conductor.security.rules[11].path=/tasks/**
conductor.security.rules[11].roles=${conductor.security.role.worker}